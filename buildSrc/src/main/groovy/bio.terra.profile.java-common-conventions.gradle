plugins {
    id 'idea'
    id 'jacoco'
    id 'java'

    id 'com.diffplug.spotless'
    id 'org.hidetake.swagger.generator'
    id 'com.srcclr.gradle'
}

boolean isCiServer = System.getenv().containsKey("CI")

if (!isCiServer) {
    tasks.withType(JavaExec).configureEach {
        systemProperty 'spring.profiles.include', 'human-readable-logging'
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// If true, search local repository (~/.m2/repository/) first for dependencies.
def useMavenLocal = false
repositories {
    if (useMavenLocal) {
        mavenLocal() // must be listed first to take effect
    }
    maven {
        // Terra proxy for maven central
        url 'https://broadinstitute.jfrog.io/broadinstitute/maven-central/'
    }
    mavenCentral()
    maven {
        url 'https://broadinstitute.jfrog.io/broadinstitute/libs-release/'
    }
    maven {
        url 'https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot-local/'
    }
}

dependencies {
    compileOnly "com.google.code.findbugs:annotations:3.0.1"
    implementation 'io.swagger.core.v3:swagger-annotations:2.1.12'
    implementation 'io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations:2.2.0'
    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.47'

    implementation 'org.slf4j:slf4j-api'
}

// Modify the standard :test task to only include unit-tagged tests.
tasks.named('test') {
    useJUnitPlatform() {
        includeTags 'unit'
    }
}

version = gradle.releaseVersion
group = 'bio.terra'

// for scans
if (hasProperty("buildScan")) {
    buildScan {
        termsOfServiceUrl = "https://gradle.com/terms-of-service"
        termsOfServiceAgree = "yes"
    }
}

spotless {
    java {
        targetExclude "${buildDir}/**"
        targetExclude "**/swagger-code/**"
        googleJavaFormat()
    }
}

task minniekenny(type:Exec) {
    workingDir rootDir

    commandLine './minnie-kenny.sh'
}

// Run spotless check when running in github actions, otherwise run spotless apply.
build {
    if (isCiServer) {
        dependsOn(spotlessCheck)
    } else {
        dependsOn(spotlessApply)
    }
    dependsOn(minniekenny)
}

jacocoTestReport {
    reports {
        // sonarqube requires XML coverage output to upload coverage data
        xml.required = true
    }
}

srcclr {
    scope = "runtimeClasspath"
}
