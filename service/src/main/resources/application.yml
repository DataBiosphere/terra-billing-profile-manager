# All environment variables that are used in one place
# This is for deployment-specific values, which may be managed by other teams
env:
  db:
    host: jdbc:postgresql://${DATABASE_HOSTNAME:127.0.0.1}:${DATABASE_PORT:5432}
    init: ${INIT_DB:false}
    stairway:
      name: ${STAIRWAY_DATABASE_NAME:profile_stairway}
      pass: ${STAIRWAY_DATABASE_USER_PASSWORD:stairwaypwd}
      user: ${STAIRWAY_DATABASE_USER:stairwayuser}
    profile:
      name: ${DATABASE_NAME:profile_db}
      pass: ${DATABASE_USER_PASSWORD:dbpwd}
      user: ${DATABASE_USER:dbuser}
  tracing:
    exportEnabled: ${CLOUD_TRACE_ENABLED:false}
    samplingRate: ${SAMPLING_PROBABILITY:0}
  sam:
    basePath: ${SAM_ADDRESS:https://sam.dsde-dev.broadinstitute.org/}
    adminsGroupEmail: ${SAM_ADMINS_GROUP_EMAIL:admin-group}
  azure:
    azureEnvironment: ${AZURE_ENVIRONMENT:AZURE}
    managedAppClientId: ${MANAGED_APP_CLIENT_ID:app-client}
    managedAppClientSecret: ${MANAGED_APP_CLIENT_SECRET:app-secret}
    managedAppTenantId: ${MANAGED_APP_TENANT_ID:app-tenant}
    managedAppWorkloadClientId: ${MANAGED_APP_WORKLOAD_CLIENT_ID:app-workload-clientid}
  sentry:
    dsn: ${SENTRY_DSN:}
    environment: ${DEPLOY_ENV:}
  tps:
    basePath: ${TPS_ADDRESS:https://tps.dsde-dev.broadinstitute.org/}

# Below here is non-deployment-specific

# When the target is 'local' the write-config.sh script will generate this properties file. It
# contains the configuration of the BPM test application. We can use that application in our
# integration testing to make sure the application code paths are working. However, we do not
# want it to appear in production environments.
spring.config.import: optional:file:build/resources/main/generated/local-properties.yaml

logging.pattern.level: '%X{requestId} %5p'

server:
  max-http-header-size: 32KB
  compression:
    enabled: true
    mime-types: text/css,application/javascript
  port: 8080

spring:
  application.name: profile
  web:
    resources:
      cache:
        cachecontrol:
          max-age: 0
          must-revalidate: true
        use-last-modified: false
      static-locations: classpath:/api/

management:
  server:
    port: 9098
  endpoints:
    web:
      exposure:
        include: "*"
  metrics:
    distribution:
      # Used to publish a histogram suitable for computing aggregable (across dimensions) percentile
      # latency approximations in Prometheus (by using histogram_quantile)
      # For more information: https://micrometer.io/docs/concepts#_histograms_and_percentiles
      percentiles-histogram[http.server.requests]: true

profile:
  ingress:
    # Default value that's overridden by Helm.
    domain-name: localhost:8080

  job:
    max-threads: 4
    polling-interval-seconds: 1
    resource-id: mc-terra-billing-profile-manager
    timeout-seconds: 1800

  sam:
    base-path: ${env.sam.basePath}
    admins-group-email: ${env.sam.adminsGroupEmail}

  policy:
    client-credential-file-path: build/resources/main/generated/bpm-client-sa.json
    base-path: ${env.tps.basePath}

  gcp:
    sa-credential-file-path: build/resources/main/generated/bpm-client-sa.json

  stairway-database:
    password: ${env.db.stairway.pass}
    uri: ${env.db.host}/${env.db.stairway.name}
    username: ${env.db.stairway.user}

  status-check:
    enabled: true
    polling-interval-seconds: 60
    startup-wait-seconds: 5
    staleness-threshold-seconds: 125

  profile-database:
    initialize-on-start: ${env.db.init}
    password: ${env.db.profile.pass}
    upgrade-on-start: true
    uri: ${env.db.host}/${env.db.profile.name}
    username: ${env.db.profile.user}

  azure:
    # azure hosting environment: AZURE for commercial and AZURE_GOV for govcloud
    azure-environment: ${env.azure.azureEnvironment}

    managed-app-clientId: ${env.azure.managedAppClientId}
    managed-app-client-secret: ${env.azure.managedAppClientSecret}
    managed-app-tenant-id: ${env.azure.managedAppTenantId}
    managed-app-workloadClientId: ${env.azure.managedAppWorkloadClientId}
    control-plane-enabled: false

    application-offers:
      - name: terra-dev-preview
        publisher: thebroadinstituteinc1615909626976
        authorized-user-key: authorizedTerraUser

    required-providers:
      - "Microsoft.Storage"
      - "Microsoft.Compute"
      - "Microsoft.Authorization"
      - "Microsoft.Batch"
      - "Microsoft.Compute"
      - "Microsoft.OperationalInsights"
      - "Microsoft.OperationsManagement"
      - "microsoft.insights"
      - "Microsoft.Network"
      - "Microsoft.DBforPostgreSQL"
      - "Microsoft.ContainerService"
      - "Microsoft.Relay"
      - "Microsoft.ManagedIdentity"

  sentry:
    dsn: ${env.sentry.dsn}
    environment: ${env.sentry.environment}

  enterprise:
    subscriptions:

  limits:

terra.common:
  kubernetes:
    in-kubernetes: false
  stairway:
    cluster-name-suffix: profile-stairway
    force-clean-start: false # ${env.db.init}
    max-parallel-flights: 50
    migrate-upgrade: true
    quiet-down-timeout: 30s
    terminate-timeout: 30s
    tracing-enabled: true
    retention-check-interval: 1d
    completed-flight-retention: 90d

  tracing:
    sampling-ratio: ${env.tracing.samplingRate}
  google:
    tracing:
      enabled: ${env.tracing.exportEnabled}

spendreporting:
  azure:
    max-date-range-days: 90
    # keep result for 24 hours
    cleanup-cache-cron-schedule: "0 0 0 * * *"

otel:
  sdk:
    disabled: false # set to true to disable all open telemetry features

  # terra-common-lib configures trace exporting to GCP; we need to disable the
  # built-in otel exporter.
  traces:
    exporter: none

  resource:
    attributes:
      service:
        name: ${spring.application.name}
        version: ${bpm.version.gitTag:unknown}
