name: Verify consumer pacts
# The purpose of this workflow is to verify ANY consumer contract(s) dependent on BPM provider using Pact framework.
#
# This workflow is triggered when
#
# 1. Consumer makes a change that results in a new pact published to Pact Broker (will verify ONLY the changed pact and publish the verification results back to the broker)
# 2. Provider makes a change (runs verification tests against ALL DEPLOYED consumer pact versions and publishes corresponding verification results)
#
#
# The workflow requires Pact broker credentials
# - PACT_BROKER_USERNAME - the Pact Broker username
# - PACT_BROKER_PASSWORD - the Pact Broker password
on:
  pull_request:
    branches: [ main ]
    paths-ignore: [ '**.md' ]
  push:
    branches: [ main ]
    paths-ignore: [ '**.md' ]
  merge_group:
    branches: [ main ]
    paths-ignore: [ '**.md' ]
  workflow_dispatch:
    inputs:
      pb-event-type:
        description: 'the Pact Broker event type that triggers this workflow'
        required: true
        type: string
      consumer-name:
        description: 'the consumer name'
        required: true
        type: string
      consumer-version-number:
        description: 'the version number of the most recent consumer version associated with the pact content'
        required: true
        type: string
      provider-version-number:
        description: 'the provider version number for the verification result'
        required: true
        type: string
      consumer-version-tags:
        description: 'the list of tag names for the most recent consumer version associated with the pact content, separated by ", "'
        required: true
        type: string
      consumer-version-branch:
        description: 'the name of the branch for most recent consumer version associated with the pact content'
        required: true
        type: string
      provider-version-branch:
        description: 'the name of the branch for the provider version associated with the verification result'
        required: true
        type: string
      consumer-labels:
        description: 'the list of labels for the consumer associated with the pact content, separated by ", "'
        required: false
        type: string
      provider-labels:
        description: 'the list of labels for the provider associated with the pact content, separated by ", "'
        required: false
        type: string
      pact-url:
        description: 'the "permalink" URL to the newly published pact (the URL specifying the consumer version URL, rather than the "/latest" format'
        required: true
        type: string

env:
  CAN_I_DEPLOY_RUN_NAME: 'can-i-deploy-${{ github.event.repository.name }}-${{ github.run_id }}-${{ github.run_attempt }}'

jobs:

  bump-check:
    runs-on: ubuntu-latest
    outputs:
      is-bump: ${{ steps.skiptest.outputs.is-bump }}
    steps:
      - uses: actions/checkout@v3
      - name: Skip version bump merges
        id: skiptest
        uses: ./.github/actions/bump-skip
        with:
          event-name: ${{ github.event_name }}
  # We only need a new version tag when this workflow is triggered by opening, updating a PR or PR merge.
  # When triggered by a Pact Broker webhook, the provider version (GIT hash or release tag)
  # is already included in the payload, then a new version tag wouldn't be needed.
  regulated-tag-job:
    needs: [ bump-check ]
    if: ${{ needs.bump-check.outputs.is-bump == 'no' }}
    uses: ./.github/workflows/tag.yml
    with:
      dry-run: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    secrets: inherit

  verify-consumer-pact:
    needs: [ bump-check, regulated-tag-job ]
    if: ${{ needs.bump-check.outputs.is-bump == 'no' }}
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    outputs:
      provider-sha: ${{ steps.verification-test.outputs.provider-sha }}
      provider-version: ${{ steps.verification-test.outputs.provider-version }}

    steps:
      - name: Checkout current code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract branch
        id: extract-branch
        run: |
          GITHUB_EVENT_NAME=${{ github.event_name }}
          if [[ "$GITHUB_EVENT_NAME" == "push" ]]; then
            GITHUB_REF=${{ github.ref }}
            GITHUB_SHA=${{ github.sha }}
          elif [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            GITHUB_REF=refs/heads/${{ github.head_ref }}
            GITHUB_SHA=${{ github.event.pull_request.head.sha }}
          elif [[ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]]; then
            GITHUB_REF=${{ github.ref }} # The Git Ref that this workflow runs on
            GITHUB_SHA=${{ github.sha }} # The Git Sha that this workflow runs on
          else
            echo "Failed to extract branch information"
            exit 1
          fi
          echo "CURRENT_BRANCH=${GITHUB_REF/refs\/heads\//""}" >> $GITHUB_ENV
          echo "CURRENT_SHA=$GITHUB_SHA" >> $GITHUB_ENV

      - name: Capture webhook event payload as envvars
        if: ${{ inputs.pb-event-type != '' }}
        run: |
          echo "pb-event-type=${{ inputs.pb-event-type }}"
          echo "consumer-name=${{ inputs.consumer-name }}"

          # The consumer-version-branch and consumer-version-number identify the most recent
          # consumer branch and version associated with the pact content.
          echo "consumer-version-branch/consumer-version-number=${{ inputs.consumer-version-branch }}/${{ inputs.consumer-version-number }}"

          # The provider-version-number represents the provider version number in the webhook event payload.
          # This corresponds to the GitHub release tag recorded by Sherlock for the corresponding
          # deployment environment (dev, staging, and prod).
          echo "provider-version-branch/provider-version-number=${{ inputs.provider-version-branch }}/${{ inputs.provider-version-number }}"

          # The pact-url is included here in case future pact4s client supports it.
          echo "pact-url=${{ inputs.pact-url }}"

          echo "PROVIDER_BRANCH=${{ inputs.provider-version-branch }}" >> $GITHUB_ENV
          # echo "CHECKOUT_BRANCH=${{ inputs.provider-version-branch }}" >> $GITHUB_ENV

          # release_tag="${{ inputs.provider-version-number }}"
          echo "PROVIDER_TAG=${{ inputs.provider-version-number }}" >> $GITHUB_ENV
          # commit_hash=$(git rev-list -n 1 "${release_tag}")
          # echo "PROVIDER_SHA=${commit_hash}" >> $GITHUB_ENV
          # echo "CHECKOUT_SHA=${commit_hash}" >> $GITHUB_ENV
          echo "CONSUMER_NAME=${{ inputs.consumer-name }}" >> $GITHUB_ENV
          echo "CONSUMER_BRANCH=${{ inputs.consumer-version-branch }}" >> $GITHUB_ENV
          echo "CONSUMER_SHA=${{ inputs.consumer-version-number }}" >> $GITHUB_ENV

      - name: Set PROVIDER_VERSION envvar
        run: |
          # The PROVIDER_VERSION envvar is used to identify the provider version
          # for publishing the results of provider verification.
          if [[ -z "${{ inputs.pb-event-type }}" ]]; then
            echo "PROVIDER_BRANCH=${{ env.CURRENT_BRANCH }}" >> $GITHUB_ENV
            echo "PROVIDER_VERSION=${{ needs.regulated-tag-job.outputs.new-tag }}" >> $GITHUB_ENV
          else
            echo "PROVIDER_VERSION=${{ env.PROVIDER_TAG }}" >> $GITHUB_ENV
          fi

      - name: Switch to appropriate provider branch
        run: |
          echo "This workflow has been triggered by '${{ github.event_name }}' event."

          # If the PROVIDER_TAG envvar exists, switch to the corresponding tag.
          # This condition is true when the workflow is triggered by a Pact Broker webhook event.
          if [[ -n "${{ env.PROVIDER_TAG }}" ]]; then
            echo "git checkout tags/${{ env.PROVIDER_TAG }}"
            git checkout tags/${{ env.PROVIDER_TAG }}

          # Otherwise, switch to CURRENT_BRANCH if the workflow has been triggered by a
          # PR commit or merge onto the main branch.
          elif [[ "${{ github.event_name }}" == "pull_request" ]] || [[ "${{ github.event_name }}" == "push" ]]; then
            echo "git checkout ${{ env.CURRENT_BRANCH }}"
            git checkout ${{ env.CURRENT_BRANCH }}
          fi

          # if [[ -z "${{ env.PROVIDER_BRANCH }}" ]]; then
          #  echo "PROVIDER_BRANCH=${{ env.CURRENT_BRANCH }}" >> $GITHUB_ENV
          # fi
          # if [[ -z "${{ env.PROVIDER_SHA }}" ]]; then
          #  echo "PROVIDER_SHA=${{ env.CURRENT_SHA }}" >> $GITHUB_ENV
          # fi

          # Output the HEAD commit of the provider branch that has been switched to.
          echo "git rev-parse HEAD"
          git rev-parse HEAD

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: v1-${{ runner.os }}-gradle-${{ github.ref }}-${{ github.sha }}
          restore-keys: v1-${{ runner.os }}-gradle-${{ github.ref }}

      - name: Verify consumer pacts and publish verification status to Pact Broker
        id: verification-test
        env:
          PACT_BROKER_URL: pact-broker.dsp-eng-tools.broadinstitute.org
          PACT_PROVIDER_VERSION: ${{ env.PROVIDER_VERSION }}
          PACT_PROVIDER_BRANCH:  ${{ env.PROVIDER_BRANCH }}
          PACT_BROKER_USERNAME:  ${{ secrets.PACT_BROKER_USERNAME }}
          PACT_BROKER_PASSWORD:  ${{ secrets.PACT_BROKER_PASSWORD }}
        run: |
          # echo "provider-sha=${{ env.PROVIDER_SHA }}" >> $GITHUB_OUTPUT
          echo "provider-version=${{ env.PACT_PROVIDER_VERSION }}" >> $GITHUB_OUTPUT
          # echo "env.CHECKOUT_BRANCH=${{ env.CHECKOUT_BRANCH }} # If not empty, this reflects the branch being checked out (generated by Pact Broker)"
          # echo "env.CHECKOUT_SHA=${{ env.CHECKOUT_SHA }}       # If not empty, this reflects the git commit hash of the branch being checked out (generated by Pact Broker)"
          # echo "env.CURRENT_BRANCH=${{ env.CURRENT_BRANCH }}   # This reflects the provider branch to switch to if workflow has been triggered by PR or merge commit"
          # echo "env.CURRENT_SHA=${{ env.CURRENT_SHA }}         # This reflects the HEAD commit of the branch being switched to if workflow has been triggered by PR or merge commit"
          echo "env.PROVIDER_BRANCH=${{ env.PACT_PROVIDER_BRANCH }} # This reflects the provider branch to switch to for pact verification"
          # echo "env.PROVIDER_SHA=${{ env.PROVIDER_SHA }}       # This reflects the provider version for pact verification"
          echo "env.CONSUMER_BRANCH=${{ env.CONSUMER_BRANCH }} # This reflects the consumer branch for pact verification (generated by Pact Broker)"
          echo "env.CONSUMER_SHA=${{ env.CONSUMER_SHA }}       # This reflects the consumer version for pact verification (generated by Pact Broker)"
          echo "env.PACT_PROVIDER_VERSION=${{ env.PACT_PROVIDER_VERSION }}  # Deprecate env.PACT_PROVIDER_COMMIT. This new envvar is used for migrating GIT hash to app versioning"
          ./gradlew --build-cache verifyPacts


  can-i-deploy: # The can-i-deploy job will run as a result of a PR. It reports the pact verification statuses on all deployed environments.
    runs-on: ubuntu-latest
    if: ${{ inputs.pb-event-type == '' && needs.bump-check.outputs.is-bump == 'no' }}
    needs: [ verify-consumer-pact, bump-check ]
    steps:
      - name: Dispatch to terra-github-workflows
        uses: broadinstitute/workflow-dispatch@v4.0.0
        with:
          run-name: "${{ env.CAN_I_DEPLOY_RUN_NAME }}"
          workflow: .github/workflows/can-i-deploy.yaml
          repo: broadinstitute/terra-github-workflows
          ref: refs/heads/main
          token: ${{ secrets.BROADBOT_TOKEN }} # github token for access to kick off a job in the private repo
          inputs: '{
            "run-name": "${{ env.CAN_I_DEPLOY_RUN_NAME }}",
            "pacticipant": "bpm",
            "version": "${{ needs.verify-consumer-pact.outputs.provider-version }}"
          }'
